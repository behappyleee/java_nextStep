package http;

import static org.junit.Assert.assertEquals;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HttpRequestTest {
	private String testDirectory = "C:\\Users\\dhfhf\\Desktop\\myfolder\\workspace\\java_nextStep\\web-application-server\\src\\test\\resource\\";
	
	Logger logger = LoggerFactory.getLogger(this.getClass());
	
	// HTTP GET 에 대한 TEST
	@Test
	public void request_GET() throws Exception {
		InputStream in = new FileInputStream(new File(testDirectory + "Http_GET.txt"));
		// HttpRequest_by_leech request = new HttpRequest_by_leech(in);
		
		HttpRequest request = new HttpRequest(in);
		assertEquals("GET", request.getMethod()); // getMethod 를 가져온다.
		assertEquals("/user/create", request.getPath());	// getPath 를 가져온다
		assertEquals("keep-alive", request.getHeader("Connection"));
		assertEquals("javajigi", request.getParameter("userId"));
	}
	
	// HTTP POST 에 대한 TEST
	@Test
	public void request_POST() throws Exception {
		InputStream in = new FileInputStream(new File(testDirectory + "Http_POST.txt"));
		HttpRequest_by_leech request = new HttpRequest_by_leech(in);
		assertEquals("POST", request.getMethod());
		assertEquals("/user/create", request.getPath());
		assertEquals("keep-alive", request.getHeader("Connection"));
		assertEquals("javajigi", request.getParameter("userId"));
	}
	
	// HttpRequest processRequestLine 메서드가 복잡하므로 해당 메서드만 테스트 할 수 있는 방법을 고려
	// 첫째 방법. 메서드 접근제어자가 private 이므로 default 로 수정 후	메서드 처리 결과를 반환하도록 수정 
	// 둘쨰 방법. 메서드 구현 로직을 새로운 클래스로 분리하는 방법 (RequestLine 이라는 새로운 클래스를 추가하는 방식으로 Refactoring 을 진행)  
	
	// 이렇게 RequestLine 을 따로 분리를 할 시 Test 가 용이

	
	
	
	
}
