package webserver;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Socket;
import java.net.URL;
import java.nio.file.Files;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import db.DataBase;
import model.User;
import util.HttpRequestUtils;
import util.IOUtils;

public class RequestHandler<RequestDispatcher> extends Thread {
	
    private static final Logger logger = LoggerFactory.getLogger(RequestHandler.class);

    private Socket connection;

    private DataBase dataBase;
    
    public RequestHandler(Socket connectionSocket) {
        this.connection = connectionSocket;
    }
    
	public void run() {
		logger.debug("connection info : {} ", connection);	// connection 에 대한 모든 정보
		
		// inputStream - 글자를 1byte 씩 밖에 못 읽음, 데이터 입력 시, outputStream - 데이터 출력 시 (Stream 은 단방향 통신, 하나의 Stream 으로 입출력을 동시에 할 수 없음 
        // InputStream - 클라이언트(웹 브라우저) 에서 서버로 요청을 보낼 때 전달되는 데이터를 담당하는 스트림 
		// OutputStream - 서버에서 클라이언트로 응답을 보낼 때 전달되는 데이터를 담당하는 스트림
		
		// WebBrowser 에서 서버와 송신을 할 때는 Socket 을 통하여 송수신을 가능하게 한다.
		try(InputStream in = connection.getInputStream(); OutputStream out = connection.getOutputStream()) {
            // TODO 사용자 요청에 대한 처리는 이 곳에 구현하면 된다.
        	// InputStream Reader 는 원래 1 Byte 씩 InputStream 은 읽어 들이지만 
        	// InputStreamReader 는 문자 단위로 읽어 준다 (InputStreamReader 은 InputStream 객체를 항상 가지고 있어야 한다.)
        	InputStreamReader reader = new InputStreamReader(in);
        	BufferedReader br = new BufferedReader(reader);
  
        	// InputStreamReader 덕분에 글자를 통쨰로 읽을 수 있지만
        	// 배열 크기를 일일이 지정해 주어야 해서 Bufferd Reader 는 Line 단위로 글을 읽음 
        	// BufferedReader 를 이용하여 	InputStreamReader 입력값을 객체로 사용
            String line = br.readLine();	// BufferedReader 에 inputStream 읽어 들인 모든 정보가 담겨 있음 ... 
            String url = line.split(" ")[1];
            String methodType = line.split(" ")[0];
            int contentLength = 0;
            boolean isContainQueryString = url.contains("?");
            
            HttpRequestUtils httpRequestUtils = new HttpRequestUtils();
            Map<String, String> params = null;

            if(isContainQueryString) {
            	int index = url.indexOf('?');
            	String requestParams = url.substring(index+1);
            	url = url.substring(0, index);
            	params = httpRequestUtils.parseQueryString(requestParams);
            }
            
            while(!"".equals(line)) {
            	line = br.readLine();	// br 에 가지고 있는 정보를 계속 읽어 들임 
            	logger.debug("line 읽어들인 정보 : {} ", line);
            	if(line.contains("Content-Length")) {
            		contentLength = Integer.parseInt(line.split(":")[1].trim().toString());
            	}
            	if(line == null) { 
            		return; 
            	}
            }
            
            byte[] body;
            DataOutputStream dos = new DataOutputStream(out);	// DataOutputStream 으로 데이터 파일을 읽어 출력 시켜 줌 
            
            // 뒤 주소가 없을 시 Default로 Hello World 출력하게 만듦
            if(url.equals("/")) {
            	logger.debug("URL /");
            	body = "Hello Linux Test Git World".getBytes();
            	response200Header(dos, body.length);
            	responseBody(dos, body);
            } else if(url.equals("/index.html")) {
            	logger.debug("URL /index.html");
            	body = Files.readAllBytes(new File("./webapp" + url).toPath());
            	response200Header(dos, body.length);
            	responseBody(dos, body);
            } else if(url.equals("/user/form.html")) {
            	logger.debug("URL /user/form.html");
            	body = Files.readAllBytes(new File("./webapp" + url).toPath());
            	response200Header(dos, body.length);
            	responseBody(dos, body);
            } else if(url.equals("/user/create")) {
            	logger.debug("URL /user/create");
            	
            	if(methodType.equals("POST")) {
            		IOUtils iouUtils = new IOUtils();	
            		String bodyData = iouUtils.readData(br, contentLength);
            		if(bodyData.contains("&")) {
            			String[] joinParameterData = bodyData.split("&");
            			User newUser = new User(joinParameterData[0], joinParameterData[1], joinParameterData[2], joinParameterData[3]);
            			dataBase.addUser(newUser);
            			response302Header(dos, "index.html");	// 원하는 페이지 URL 로 이동 
            		}
            	} else if(methodType.equals("GET") || isContainQueryString || params != null) {
            		// String userId, String password, String name, String email
            		User newUser = new User(params.get("userId"), params.get("password"), params.get("name"), params.get("email"));
            		dataBase.addUser(newUser);
            		logger.debug("NEW USER 객체 : {} ", newUser.toString());	
            	}
            } else if(url.equals("/usse/login.html")) {
            	logger.debug("URL /usse/login.html");
            	
            	
            	
            }
            
            

        } catch (IOException e) {
            logger.error(e.getMessage());
        }
    }

	private void response200Header(DataOutputStream dos, int lengthOfBodyContent) {
        try {
            dos.writeBytes("HTTP/1.1 200 OK \r\n");
            dos.writeBytes("Content-Type: text/html;charset=utf-8\r\n");
            dos.writeBytes("Content-Length: " + lengthOfBodyContent + "\r\n");
            dos.writeBytes("\r\n");
        } catch (IOException e) {
        	logger.error(e.getMessage());
        }
    }
	
	private void response302Header(DataOutputStream dos, String pageUrl) {
        try {
        	logger.debug("RESPONSE 302 HEADER {} ", dos);
            dos.writeBytes("HTTP/1.1 302 Found \r\n");
            dos.writeBytes("Location: http://localhost:8080/" + pageUrl + "  \r\n");
            dos.writeBytes("\r\n");
        } catch (IOException e) {
        	logger.error(e.getMessage());
        }
    }
    
    private void responseBody(DataOutputStream dos, byte[] body) {
        try {
            dos.write(body, 0, body.length);
            dos.flush();
        } catch (IOException e) {
        	logger.error(e.getMessage());
        }
    }
    
    // 302 Redirect 구현 하기 
    private URL redirectURL(URL url) {
    	try {
			HttpURLConnection con = (HttpURLConnection) url.openConnection();
			
			logger.debug("cont Check : {} " , con);
			
			con.setInstanceFollowRedirects(false);
		
    	
    	
    	} catch (IOException e) {
			e.printStackTrace();
		}
    	
    	return url;
    }
    
}

/*	제일 처음 기본 Source
 * public class RequestHandler extends Thread {
    private static final Logger log = LoggerFactory.getLogger(RequestHandler.class);

    private Socket connection;

    public RequestHandler(Socket connectionSocket) {
        this.connection = connectionSocket;
    }

    public void run() {
        log.debug("New Client Connect! Connected IP : {}, Port : {}", connection.getInetAddress(),
                connection.getPort());

        try (InputStream in = connection.getInputStream(); OutputStream out = connection.getOutputStream()) {
            // TODO 사용자 요청에 대한 처리는 이 곳에 구현하면 된다.
            DataOutputStream dos = new DataOutputStream(out);
            byte[] body = "Hello World".getBytes();
            response200Header(dos, body.length);
            responseBody(dos, body);
        } catch (IOException e) {
            log.error(e.getMessage());
        }
    }

    private void response200Header(DataOutputStream dos, int lengthOfBodyContent) {
        try {
            dos.writeBytes("HTTP/1.1 200 OK \r\n");
            dos.writeBytes("Content-Type: text/html;charset=utf-8\r\n");
            dos.writeBytes("Content-Length: " + lengthOfBodyContent + "\r\n");
            dos.writeBytes("\r\n");
        } catch (IOException e) {
            log.error(e.getMessage());
        }
    }

    private void responseBody(DataOutputStream dos, byte[] body) {
        try {
            dos.write(body, 0, body.length);
            dos.flush();
        } catch (IOException e) {
            log.error(e.getMessage());
        }
    }
}
 * */

