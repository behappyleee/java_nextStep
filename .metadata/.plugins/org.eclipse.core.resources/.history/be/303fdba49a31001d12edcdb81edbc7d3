package util;

import static org.junit.Assert.assertEquals;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import webserver.HttpRequest;

/*	HttpRequest 는 InputStream 을 생성인자로 받은 후 InputStream 이 담겨있는 데이터를 필요한 형태로 분리한 후
 *	객체의 필드에 저장하는 역할만 함 	
 *  
 *  테스트 코드를 기반으로 개발을 할 경우 첫번째 효과는 클래스에 버그가 있는지를 빨리 찾아 구현이 가능함
 *  클래스에 대한 테스트를 마친 후 사용을 한다면 수동 테스트 횟수는 급격히 줄어듦
 *  
 *  두번째 효과는 디버깅이 쉬움, 수동 테스를 하는 과정에서 버그가 발생 하면 어느 곳 에서 버그가 발생하였는지
 *  확인이 어렵겠지만 클래스에 대한 단위 테스트를 하는 것은 디버깅을 좀 더 쉽고 빠르게 할 수 있기에 생산성을 높여줌
 *   
 *  세번째 효과는 테스트 코드가 존재하기에 
 *  
 */




public class HttpRequestTest {
	private String testDirectory = "C:\\Users\\dhfhf\\Desktop\\myfolder\\workspace\\java_nextStep\\web-application-server\\src\\test\\resource\\";
	
	Logger logger = LoggerFactory.getLogger(this.getClass());
	
	// HTTP GET 에 대한 TEST
	@Test
	public void request_GET() throws Exception {
		InputStream in = new FileInputStream(new File(testDirectory + "Http_GET.txt"));
		HttpRequest request = new HttpRequest(in);
		assertEquals("GET", request.getMethod()); // getMethod 를 가져온다.
		assertEquals("/user/create", request.getPath());	// getPath 를 가져온다
		assertEquals("keep-alive", request.getHeader("Connection"));
		assertEquals("javajigi", request.getParameter("userId"));
	}
	
	// HTTP POST 에 대한 TEST
	@Test
	public void request_POST() throws Exception {
		InputStream in = new FileInputStream(new File(testDirectory + "Http_POST.txt"));
		HttpRequest request = new HttpRequest(in);
		assertEquals("POST", request.getMethod());
		assertEquals("/user/create", request.getPath());
		assertEquals("keep-alive", request.getHeader("Connection"));
		assertEquals("javajigi", request.getParameter("userId"));
	}
	
	

}
