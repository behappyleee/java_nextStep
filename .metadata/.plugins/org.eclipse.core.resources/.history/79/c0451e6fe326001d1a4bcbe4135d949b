package webserver;

import java.io.BufferedReader;

import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpCookie;
import java.net.HttpURLConnection;
import java.net.Socket;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import db.DataBase;
import model.User;
import util.HttpRequestUtils;
import util.IOUtils;

public class RequestHandler<RequestDispatcher> extends Thread {
	
    private static final Logger logger = LoggerFactory.getLogger(RequestHandler.class);

    private Socket connection;

    private DataBase dataBase;
    
    public RequestHandler(Socket connectionSocket) {
        this.connection = connectionSocket;
    }
    
	public void run() {
		logger.debug("connection info : {} ", connection);	// connection 에 대한 모든 정보
		
		// inputStream - 글자를 1byte 씩 밖에 못 읽음, 데이터 입력 시, outputStream - 데이터 출력 시 (Stream 은 단방향 통신, 하나의 Stream 으로 입출력을 동시에 할 수 없음 
        // InputStream - 클라이언트(웹 브라우저) 에서 서버로 요청을 보낼 때 전달되는 데이터를 담당하는 스트림 
		// OutputStream - 서버에서 클라이언트로 응답을 보낼 때 전달되는 데이터를 담당하는 스트림
		
		// WebBrowser 에서 서버와 송신을 할 때는 Socket 을 통하여 송수신을 가능하게 한다.
		try(InputStream in = connection.getInputStream(); OutputStream out = connection.getOutputStream()) {
            // TODO 사용자 요청에 대한 처리는 이 곳에 구현하면 된다.
        	// InputStream Reader 는 원래 1 Byte 씩 InputStream 은 읽어 들이지만 
        	// InputStreamReader 는 문자 단위로 읽어 준다 (InputStreamReader 은 InputStream 객체를 항상 가지고 있어야 한다.)
        	InputStreamReader reader = new InputStreamReader(in);
        	BufferedReader br = new BufferedReader(reader);
  
        	// InputStreamReader 덕분에 글자를 통쨰로 읽을 수 있지만
        	// 배열 크기를 일일이 지정해 주어야 해서 Bufferd Reader 는 Line 단위로 글을 읽음 
        	// BufferedReader 를 이용하여 	InputStreamReader 입력값을 객체로 사용
            String line = br.readLine();	// BufferedReader 에 inputStream 읽어 들인 모든 정보가 담겨 있음 ... 
            String url = line.split(" ")[1];
            
            HttpRequestUtils httpRequestUtils = new HttpRequestUtils();
            Map<String, String> params = null;
            
            // Map<String , String> queryStringUrl = httpRequestUtils.parseQueryString(url);
            
            logger.debug("InputStream line : {} ", line);	// line 에 첫번 째 Header 정보가 담김 ...
            logger.debug("사용자 입력 URL : {} ", url);
            
            boolean isContainQueryString = url.contains("?");	
            
            if(isContainQueryString) {
            	int index = url.indexOf('?');
            	String requestParams = url.substring(index+1);
            	url = url.substring(0, index);
            	params = httpRequestUtils.parseQueryString(requestParams);
            	
            	logger.debug("queryString 자른 후 Url : {} ", url);
            	logger.debug("GET 방식 QUERY STRING : {} " , params);
            }
            
           //  while(!"".equals(line)) {
            while(!"".equals(line)) {
            	line = br.readLine();	// br 에 가지고 있는 정보를 계속 읽어 들임 
            	logger.debug("line 읽어들인 정보 : {} ", line);
            	if(line == null) { 
            		return; 
            	}
				 
            }
            
            byte[] body;
            DataOutputStream dos = new DataOutputStream(out);	// DataOutputStream 으로 데이터 파일을 읽어 출력 시켜 줌 
            
            // 뒤 주소가 없을 시 Default로 Hello World 출력하게 만듦
            if(url.equals("/")) {
            	logger.debug("URL /");
            	body = "Hello Linux Test Git World".getBytes();
            	response200Header(dos, body.length);
            	responseBody(dos, body);
            } else if(url.equals("/index.html")) {
            	logger.debug("URL /index.html");
            	body = Files.readAllBytes(new File("./webapp" + url).toPath());
            	response200Header(dos, body.length);
            	responseBody(dos, body);
            } else if(url.equals("/user/form.html")) {
            	logger.debug("URL /user/form.html");
            	body = Files.readAllBytes(new File("./webapp" + url).toPath());
            	response200Header(dos, body.length);
            	responseBody(dos, body);
            } else if(url.equals("/user/create")) {
            	logger.debug("URL /user/create");
            	
            	// body = Files.readAllBytes(new File("./webapp" + url).toPath());
            	
            	logger.debug("params IS Empty : {} " , params.isEmpty());
            	logger.debug("params IS NULL : {} ", params != null);
            	logger.debug("isContainQueryString : {} " , isContainQueryString);
            	
            	
            	// Get 방식 회원 Model 에 저장 하기
            	if(params != null || !params.isEmpty() || isContainQueryString) {
            		logger.debug("queryString Url Data : {} " , params);
            		// String userId, String password, String name, String email
            		User newUser = new User(params.get("userId"), params.get("password"), params.get("name"), params.get("email"));
            		
            		logger.debug("NEW USER 객체 : {} ", newUser.toString());	
            	}
            	
            	// response200Header(dos, body.length);	
            	// responseBody(dos, body);
            }
            
            // TODO Get 회원 가입 구현 하기 !!!
            
            
            
//        	String [] tokens = line != null ? line.split(" ") : null;
//        	// 첫번째 Token 에서 url 을 얻는다
//        	// String url = tokens[1];
//        	String header = "0"; 
//        	int indexNum = 0;
//            
//            while(!"".equals(line)) {
//            	logger.info("Header Check : {} " , line);
//            	line = br.readLine();
//            	if(indexNum==2) {
//            		String [] headerContent = line.split(": ");
//            		header = headerContent[1];
//            	}
//            	indexNum++;
//            }	
           
//        	byte[] body;
//            DataOutputStream dos = new DataOutputStream(out);
//            
//            // 뒤 주소가 없을 시 Default로 Hello World 출력하게 만듦
//            if(url.equals("/")) {
//            	body = "Hello Linux Test Git World".getBytes();
//            	response200Header(dos, body.length);
//            	responseBody(dos, body);
//            }
            
//            if (url.contains("?"))  {
//        		 // 쿼리 스트링이 있을 시 잘라버림 	
//        		 int index = url.indexOf("?");
//        		 String requestPath = url.substring(0, index);
//        		 String params = url.substring(index+1);
//        		 Map <String, String> paramCheck = HttpRequestUtils.parseQueryString(params);
//        		 User user = new User(paramCheck.get("userId") , paramCheck.get("password") , paramCheck.get("name"), paramCheck.get("email"));
//        		 DataBase.addUser(user);
//        		 
//        		 // 회원가입 성공 시 index.html 실패 시 /user/login_failed.html 로 이동
//        		 if(DataBase.findUserById(paramCheck.get("userId")) != null ) {
//        			 url = "/index.html";
//        		 } else {
//        			 url = "/user/login_failed.html";
//        		 }
//            } else if(url.equals("/user/create")) {
//            	String postBody = IOUtils.readData(br, Integer.parseInt(header));
//            	Map<String, Object> map = new HashMap<String, Object>();
//            	String[] getParam = postBody.split("&");
//            	User user = new User(getParam[0].split("=")[1] , getParam[1].split("=")[1] ,getParam[2].split("=")[1] , getParam[3].split("=")[1]);
//            	
//            	DataBase.addUser(user);
//            	if(user.getUserId() != null) {
//            		URLConnection con = new URL("http://localhost:8080/index.html").openConnection();
//            		URL redirectUrl = redirectURL(con.getURL());
//            	} else {
//            		
//					/*
//					 * URL setUrl = new URL("http://localhost:8080/user/login_failed.html");
//					 * URLConnection conn = setUrl.openConnection(); url =
//					 * "/user/login_failed.html";
//					 */
//            		
//            	}
//            } else if(url.equals("/user/login")) {
//            	String postBody = IOUtils.readData(br, Integer.parseInt(header));
//            	Map<String, Object> map = new HashMap<String, Object>();
//            	String[] getParam = postBody.split("&");
//            	String inputId = getParam[0].split("=")[1];
//            	String inputPwd = getParam[1].split("=")[1];
//            	User getUserId = DataBase.findUserById(inputId);
//            	if(getUserId == null) {
//            		System.out.println("잘못된 아이디 정보 입니다! ");
//            	} else {
//            		HttpCookie cookie;
//            		if(getUserId.getPassword().equals(inputPwd)) {
//            			System.out.println("로그인 되었습니다 !");
//            			cookie = new HttpCookie("logined", "true");
//            			url = "/index.html";
//            		} else {
//            			System.out.println("비밀번호가 다릅니다 !");
//            			cookie = new HttpCookie("logined", "false");
//            			url = "/user/login_failed.html";
//            		}
//            	}
//             }
            
        	 // 성공시 index.html 로 가지만 회원가입 후 로그인 누를 시 오류 발생 이것 해결하기 
//        	 body = Files.readAllBytes(new File("./webapp" + url).toPath());
//        	 System.out.println("마지막 Body 확인 : " + body);
//        	 response200Header(dos, body.length);
//             responseBody(dos, body);	
             // get 방식으로 회원가입.. .
            
        } catch (IOException e) {
            logger.error(e.getMessage());
        }
    }

	private void response200Header(DataOutputStream dos, int lengthOfBodyContent) {
        try {
            dos.writeBytes("HTTP/1.1 200 OK \r\n");
            dos.writeBytes("Content-Type: text/html;charset=utf-8\r\n");
            dos.writeBytes("Content-Length: " + lengthOfBodyContent + "\r\n");
            dos.writeBytes("\r\n");
        } catch (IOException e) {
        	logger.error(e.getMessage());
        }
    }
    
    private void responseBody(DataOutputStream dos, byte[] body) {
        try {
            dos.write(body, 0, body.length);
            dos.flush();
        } catch (IOException e) {
        	logger.error(e.getMessage());
        }
    }
    
    // 302 Redirect 구현 하기 
    private URL redirectURL(URL url) {
    	try {
			HttpURLConnection con = (HttpURLConnection) url.openConnection();
			con.setInstanceFollowRedirects(false);
		} catch (IOException e) {
			e.printStackTrace();
		}
    	
    	return url;
    }
    
}

/*	제일 처음 기본 Source
 * public class RequestHandler extends Thread {
    private static final Logger log = LoggerFactory.getLogger(RequestHandler.class);

    private Socket connection;

    public RequestHandler(Socket connectionSocket) {
        this.connection = connectionSocket;
    }

    public void run() {
        log.debug("New Client Connect! Connected IP : {}, Port : {}", connection.getInetAddress(),
                connection.getPort());

        try (InputStream in = connection.getInputStream(); OutputStream out = connection.getOutputStream()) {
            // TODO 사용자 요청에 대한 처리는 이 곳에 구현하면 된다.
            DataOutputStream dos = new DataOutputStream(out);
            byte[] body = "Hello World".getBytes();
            response200Header(dos, body.length);
            responseBody(dos, body);
        } catch (IOException e) {
            log.error(e.getMessage());
        }
    }

    private void response200Header(DataOutputStream dos, int lengthOfBodyContent) {
        try {
            dos.writeBytes("HTTP/1.1 200 OK \r\n");
            dos.writeBytes("Content-Type: text/html;charset=utf-8\r\n");
            dos.writeBytes("Content-Length: " + lengthOfBodyContent + "\r\n");
            dos.writeBytes("\r\n");
        } catch (IOException e) {
            log.error(e.getMessage());
        }
    }

    private void responseBody(DataOutputStream dos, byte[] body) {
        try {
            dos.write(body, 0, body.length);
            dos.flush();
        } catch (IOException e) {
            log.error(e.getMessage());
        }
    }
}
 * */

