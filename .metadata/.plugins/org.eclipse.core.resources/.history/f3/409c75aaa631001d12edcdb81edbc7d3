package http;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import util.HttpRequestUtils;
import util.IOUtils;

public class HttpRequest {
	
	private static final Logger logger = LoggerFactory.getLogger(HttpRequest.class);
	
	private String method;
	private String path;
	private Map<String, String> headers = new HashMap<>();
	private Map<String, String> params = new HashMap<>();
	
	private RequestLine requestLine;
	
	public HttpRequest(InputStream in) {
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(in, "UTF-8"));
			String line = br.readLine();
			if(line == null) {
				return;
			}
			
			// RequestLine 이라는 새로운 클래스를 추가하여 HttpRequest 에서 요청라인을 처리하는 책임을 분리하였지만
			// HttpRequest 의 메서드 원형은 변하지 않음, 
			
			
			// processRequestLine 메서드가 복잡하므로 RequestLine 클래스를 따로 생성하여 구현 
			requestLine = new RequestLine(line);
			// processRequestLine(line);
			
			
			line = br.readLine();
			while(!line.equals("")) {
				logger.debug("EACH LINE : {} ",  line);
				String [] tokens = line.split(":");
				headers.put(tokens[0].trim(), tokens[1].trim());
				line = br.readLine();
			}
			
			if("POST".equals(method)) {
				String body = IOUtils.readData(br, Integer.parseInt(headers.get("Content-Length")));
				params = HttpRequestUtils.parseQueryString(body);
			} else {
				params = requestLine.getParams();
			}
			
		} catch(IOException io) {
			logger.error(io.getMessage());
		}
	}
	
	// 현재 이 해당 메서드가 구현이 복잡 하므로 해당 메서드만 테스트 가능하도록 변경 
	private void processRequestLine(String requestLine) {
		logger.debug("PROCESS REQUEST LINE requestLine : {} " , requestLine);
		String[] tokens = requestLine.split(" ");
		method = tokens[0];
		if("POST".equals(method)) {
			path = tokens[1];
			return;
		}
		
		int index = tokens[1].indexOf("?");
		if(index == -1) {
			path = tokens[1];
		} else {
			path = tokens[1].substring(0, index);
			params = HttpRequestUtils.parseQueryString(tokens[1].substring(index + 1));
		}
	}
	
	public String getPath() {
		return path;
	}
	
	public String getMethod() {
		return method;
	}
	
	public String getHeader(String name) {
		return headers.get(name);
	}
	
	public String getParameter(String name) {
		return params.get(name);
	}
	
}
